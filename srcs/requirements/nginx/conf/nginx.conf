
events {
	# the events block we leave empty for default settings
}

http { # the http block

	include /etc/nginx/mime.types; # the path to the mime types file to include all the mime types
	server { # the server block
		listen 443 ssl; # this the port that the server will listen on

		ssl_certificate  /etc/nginx/ssl/inception.crt; # the path to the certificate
		ssl_certificate_key /etc/nginx/ssl/inception.key; # the path to the key
		ssl_protocols TLSv1.3; # the protocol that the server will use for ssl

		root /var/www/html; # the root directory of the server
		server_name localhost; # the domain name of the server
		index index.nginx-debian.php; # the index file that the server will use

		location ~ \.php$ { # the location of the php files
			include snippets/fastcgi-php.conf; # the configuration file for the fastcgi
			fastcgi_pass wordpress:9000; # the address of the fastcgi server
		}
	}
}

#server_name（ドメイン名で今回はlocalhost）にクライアントがアクセスした際に、nginxサーバが応答する
#サーバは、rootで指定されたディレクトリ内から、提供するウェブコンテンツのファイルを探す。
#例えば、http://localhost/somepage.htmlというリクエストを受信した場合、Nginxは/var/www/html/somepage.htmlというパス内を探す
#そして、indexは、ディレクトリがリクエストされたときにデフォルトで提供されるファイルを指定している。つまり、http://localhost/というリクエストが来たときにindexのファイルを探して返す
#存在しないパス（ex. http://localhost/notexist）をクライアントが要求してきた場合は、try_filesというものが必要になる

#location ~ \.php　｛｝は、特定のパターンにマッチするリクエストを処理するための設定ブロックの開始を示している
# ~　の性企業源を使用しており、小文字と大文字を区別する正規表現のマッチ
# \.php　.phpで終わるファイルにマッチする
#よって、.phpで終わるファイルにマッチするリクエストがされた場合に、この設定ブロックが適用される

# include snippets/fastcgi-php.conf　外部の設定ファイルをこのブロック内にインクルードし、これはphpをfastcgiで処理するための詳細な設定が含まれている

#fastCGIは、 PHP-FPMの間で高速にデータをやり取りするための通信プロトコルで、同時に副すの陸エルとを効率的に処理できる
#Nginxなどのウェブサーバはphpファイルに対するリクエストを受信すると、それをFastCGIプロトコルを介してPHP-FPMに転送する。PHP-FPMは、転送されたリクエストを処理し、実行結果をNginx返し、Nginxはその結果をクライアントに送信する
#fastcgi_passセクションでは、その処理をPHP_FPMに依頼する際の依頼先を指している。
#localhost:9000のように、内部でも完結できるが、大規模なアプリケーションの負荷分散や、サービスの分離といった観点から、外部に接続も可能


