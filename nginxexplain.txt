Nginx

nginxはもともと高い同時接続能力を持つWebサーバーとして開発された。その後、リバースプロキシ、ロードプロキシなど多くの機能が追加された。
高パフォーマンスかつ軽量でリソース効率が高く、柔軟な設定も可能。

プロキシサーバ
クライアントとインターネット上の間に位置する中継サーバ。クライアントからのリクエストを受取り、それを目的のサーバに転送し、応答をクライアントに返す
メリット
匿名性とセキュリティ：クライアントのIPアドレスを隠し、　別のアドレスで外部サーバに接続できる。
キャッシュ機能：頻繁にアクセスするウェブページのデータをプロキシサーバに保存することで同一ページへのアクセスが迅速に
アクセス制限：特定のサイトへのアクセスを制限できる（学校や企業）

フォワードプロキシとリバースプロキシ
フォワードプロキシ
クライアント側に配置され、クライアントのリクエストをインターネット上の外部サーバに転送する。匿名性向上。
通常は、特定の組織やグループ全体といった復数の人間のために設定される
リバースプロキシ
サーバ側に配置され、外部からのリクエストを受取、それを内部のバックエンドサーバに転送する。主に、ロードバランシングや、セキュリティ強化のため。
ユーザーがWebサイトにアクセスするとき、リバースプロキシがリクエストを受取、復数あるバックエンドサーバのうち適切なサーバにリクエストを転送する。
通常、特定の企業や、Webサービスのために設定される。

FastCGI
Webサーバーとアプリケーションサーバ（またはスクリプト）間の通信を効率的に行うためのプロコトルの一つ。PHP, Python,Perlといったスクリプト言語で書かれたプログラムとのやり取りで使用。
メリット
高パフォーマンス：従来のCGIは、クライアントからのリクエストを処理するたびに、新しいプロセスを生成しており、その生成と破棄が重い。FastCGIはアプリケーションプロセスをサーバ起動時に開始し、それを持続的に動作させ並行処理を行うため、効率的に処理動作が可能。
また、アプリケーションサーバと、Webサーバを別々にスケーリングも可能（高スケーラビリティ）
セキュリティ：Webサーバと別ユーザとしてFastCGIプロセスが行われるため、Webサーバの脆弱性がアプリケーションサーバに影響を与えづらい。
柔軟性：PHP, Python, Perlなど異なる言語のアプリケーションサーバを同一Webサーバで動作させることが可能。

仕組み
Webサーバ起動じいにFastCGIプロセスを立ち上げる。
クライアントからのリクエストをTCPソケット等を介してFastCGIプロセスに転送
処理結果を受取り、クライアントに返す

使用例として、　PHP-FPMはPHPをFastCGIとして実行するための実装で、高性能なPHPアプリケーションの実行が可能になる

スクリプト言語→１行毎にコンパイルと実行が繰り返されるイメージ


Nginxとその設定ファイル
デフォルトではnginx.confという名前で、/usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginxのうちのどこかにある
nginxはマスタープロセスとワーカプロセスにに分かれる
マスタープロセス：設定ファイルの読み込みと評価、ワーカプロセスの維持など
ワーカープロセス：リクエストの処理
ワーカープロセスの数などは設定ファイルから設定可能で、数は固定だったり、CPUのコア数によって調整されたりする

設定ファイルの書き方
設定ファイルはスペースやセミコロンといったシンプルなディレクティブと、｛｝で囲われたブロックでのディレクティブが存在する。
ブロックディレクティブではeventsブロックとhttpブロックがメインコンテクストにあり、serverはhttp, locationはserverブロックの中にある

Webサーバーの重要なタスクはファイルを提供することで、リクエストに余地、異なるローカルディレクトリ空ファイルを提供する設定ファイルの実装を行う。
、HTML in /data/images, images in /data/images
これは、httpブロックにあるserverブロック内のlocationブロックを編集するひつようがある。
基本、設定ファイルはサーバー名とlistenしているポート番号で分けられた複数のserverブロックを含み、nginxがどのサーバで処理を行うか判断し、リクエストのヘッダーに指定されたURIをlocationブロックのパラメータに対してテストする
例は以下
http {
	server{
		location / {
			root /data/www
		}
	}
}

このlocationブロックの"/"の部分について。
ここで指定されたpathで始まるすべてのリクエストURIに対してこのlocationブロックが適用される。"/"はすべてのURIに対してマッチするため、他のlocationブロックが適用されない限り、この設定が適用される
マッチしているリクエストには、URIはrootディレクトリで指定されたパス（今回は/data/www）が追加され、それがローカルファイルシステム上のリクエストされたファイルへのパスとなる。
もし、複数個の該当するlocationブロックが存在した場合、最も接頭辞の長いlocationが設定される。

例えば以下の場合
http {
	server{
		location / {
			root /data/www
		}

		location /images/ {
			root /data
		}
	}
}

このようなサーバーがあったとする。
http://localhost/images/example.png　というリクエストがクライアントから来た場合、nginxはローカルファイルで言う/data/images/example.pngを探して返す。もしなかったら404 not foundを返す（設定はあと）。
http://localhost/some/example.html　というリクエストには、/data/www/some/example.htmlファイルを探してくる

かんたんなプロキシサーバーのセットアップ

例1
server {
	listen 8080;
	root /data/upl;

	location / {
	}
}
通常、ポート80が空いているため、先程は指定しなかったが、今回はlistenするポートを8080に指定している。
そして、すべてのリクエストはローカルディレクトリ上の/data/uplから探すことになる。
つまり、https://localhost/some/example.txtはローカルディレクトリで言う、/data/upl/some/example.txt

例2
server {
	listen 5050;

	location / {
		proxy_pass http://localhost:8080;
	}

	location ~ \.(gif|jpg|png)$ {
		root /data/images;
	}
}
１つ目のlocationにマッチする場合（今回は基本全て）、このproxy_passで記されたサーバーにリクエストが転送される。
つまり、5050を介してきたリクエストがlocalhost:8080に転送され、返答をもらい、それを5050からクライアントに返す、
２つ目のlocationは正規表現 ~ を使用して、.gif, .jpg, .pngで終わるファイルを探している。
今回の場合、以上の三種類のファイルをリクエストされた場合、ローカルディレクトリから探し、それ以外を転送している

例3(locationの優先順位)
servet {
	location = /exact-match {
		#完全一致、優先度１
	}
	location ^~ /images/ {
		#正規表現より優先される、優先度２
	}
	location ~ \.(gif|jpg|png)$ {
		#正規表現、優先度３
	}
	location / {
		#通常表現、優先度４
		#その中でもprefixの長いものが優先される
	}
}


FastCGIのプロキシセットアップ
server {
	location / {
		fastcgi_pass	localfast:9000;
		fastcgi_param	SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param	QUERY_STRING　$query_string;
	}

	location ~ \.(gif|jpg|png)$ {
        root /data/images;
    }
}
fastcgi_passのパスを介してリクエストを転送し、同時にfastcgi_paramで指定されたスクリプトのパスと、クエリ文字列をfastCGIプロセスに渡す。
fastCGIプロセスは指定されたスクリプトを実行し、クエリ文字列をもとに処理を行う。
paramがない場合、環境変数設定に基づいてリクエストを送信する。


追加の説明
index
クライアントがディレクトリにアクセスしたときに優先的に表示するファイルを指定できる


Nginxの主要な設定ファイルとディレクトリ
メイン設定ファイル　/etc/nginx/nginx.conf
全体の基本的な設定や、他の設定ファイルを読み込むためのinclude ディレクティブが含まれている

仮想ホストの設定ファイル　/etc/nginx/site-available
defaultはその中でも、デフォルトの設定ファイル

仮想ホスト設定ファイルへのシンボリックリンク　/etc/nginx/sites-enabled
シンボリックリンクはポインタ型のファイルのイメージ。ここに記述されたファイルだけが有効になる

追加の設定ファイル /etc/nginx/conf.d
特定のモジュールの追加の構成要素(SSLやロギング設定)をここに保存するのが一般的で、nginx.confでこのファイルを読み込むように指定するのが一般的

