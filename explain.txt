Nginx

nginxはもともと高い同時接続能力を持つWebサーバーとして開発された。その後、リバースプロキシ、ロードプロキシなど多くの機能が追加された。
高パフォーマンスかつ軽量でリソース効率が高く、柔軟な設定も可能。

プロキシサーバ
クライアントとインターネット上の間に位置する中継サーバ。クライアントからのリクエストを受取り、それを目的のサーバに転送し、応答をクライアントに返す
メリット
匿名性とセキュリティ：クライアントのIPアドレスを隠し、　別のアドレスで外部サーバに接続できる。
キャッシュ機能：頻繁にアクセスするウェブページのデータをプロキシサーバに保存することで同一ページへのアクセスが迅速に
アクセス制限：特定のサイトへのアクセスを制限できる（学校や企業）

フォワードプロキシとリバースプロキシ
フォワードプロキシ
クライアント側に配置され、クライアントのリクエストをインターネット上の外部サーバに転送する。匿名性向上。
通常は、特定の組織やグループ全体といった復数の人間のために設定される
リバースプロキシ
サーバ側に配置され、外部からのリクエストを受取、それを内部のバックエンドサーバに転送する。主に、ロードバランシングや、セキュリティ強化のため。
ユーザーがWebサイトにアクセスするとき、リバースプロキシがリクエストを受取、復数あるバックエンドサーバのうち適切なサーバにリクエストを転送する。
通常、特定の企業や、Webサービスのために設定される。

FastCGI
Webサーバーとアプリケーションサーバ（またはスクリプト）間の通信を効率的に行うためのプロコトルの一つ。PHP, Python,Perlといったスクリプト言語で書かれたプログラムとのやり取りで使用。
メリット
高パフォーマンス：従来のCGIは、クライアントからのリクエストを処理するたびに、新しいプロセスを生成しており、その生成と破棄が重い。FastCGIはアプリケーションプロセスをサーバ起動時に開始し、それを持続的に動作させ並行処理を行うため、効率的に処理動作が可能。
また、アプリケーションサーバと、Webサーバを別々にスケーリングも可能（高スケーラビリティ）
セキュリティ：Webサーバと別ユーザとしてFastCGIプロセスが行われるため、Webサーバの脆弱性がアプリケーションサーバに影響を与えづらい。
柔軟性：PHP, Python, Perlなど異なる言語のアプリケーションサーバを同一Webサーバで動作させることが可能。

仕組み
Webサーバ起動じいにFastCGIプロセスを立ち上げる。
クライアントからのリクエストをTCPソケット等を介してFastCGIプロセスに転送
処理結果を受取り、クライアントに返す

使用例として、　PHP-FPMはPHPをFastCGIとして実行するための実装で、高性能なPHPアプリケーションの実行が可能になる

スクリプト言語→１行毎にコンパイルと実行が繰り返されるイメージ


Nginxとその設定ファイル
